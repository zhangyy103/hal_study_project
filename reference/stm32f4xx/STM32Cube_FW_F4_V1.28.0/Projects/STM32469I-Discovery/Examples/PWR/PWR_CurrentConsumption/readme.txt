/**
  @page PWR_CurrentConsumption PWR Current Consumption example
  
  @verbatim
  ******************** (C) COPYRIGHT 2017 STMicroelectronics *******************
  * @file    PWR/PWR_CurrentConsumption/readme.txt 
  * @author  MCD Application Team
  * @brief   Description of the PWR Current Consumption example.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
   @endverbatim

@par Example Description

How to configure the system to measure the current consumption in different 
low-power modes.

The Low Power modes are:
  - Sleep Mode
  - STOP mode with RTC
  - Under-Drive STOP mode with RTC
  - STANDBY mode without RTC and BKPSRAM
  - STANDBY mode with RTC
  - STANDBY mode with RTC and BKPSRAM
  
To run this example, user has to follow the following steps:
 1. Select the Low power modes to be measured by uncommenting the corresponding
    line inside the stm32f4xx_lp_modes.h file.
    @code
       /* #define SLEEP_MODE               */
       /* #define STOP_MODE                */
       /* #define STOP_UNDERDRIVE_MODE     */
       /* #define STANDBY_MODE             */
       /* #define STANDBY_RTC_MODE         */
       /* #define STANDBY_RTC_BKPSRAM_MODE */
    @endcode       

 2. Use an external amperemeter to measure the IDD current. 

 3. This example can not be used in DEBUG mode,this is due to the fact that the 
    Cortex-M4 core is no longer clocked during low power mode so debugging 
    features are disabled
    
@note LSE oscillator clock is used as RTC clock source by default. LSE oscillator 
      clock usually delivered by a 32.768 kHz quartz.
      The user can use also LSI as RTC clock source. The user uncomment the adequate 
      line on the main.h file.
      @code
        #define RTC_CLOCK_SOURCE_LSE  
        /* #define RTC_CLOCK_SOURCE_LSI */
      @endcode 

Here below a detailed description of the example code:

  @verbatim

 1. After reset, the program waits for USER button connected to the PA.00 to be 
    pressed to enter the selected low power mode.
     - When the RTC is not used in the low power mode configuration, press
       again the User button or the wake up button to exit the low power mode.
     - When the RTC is used, the wake-up from low power mode is automatically 
       generated by the RTC (after 20s).

 2. Low power modes description:

    - Sleep Mode
    ============  
            - System Running at PLL (180MHz)
            - Flash 5 wait state
            - Instruction and Data caches ON
            - Prefetch OFF       
            - Code running from Internal FLASH
            - All peripherals disabled.
            - Wake-up using EXTI Line (User Button PA.00)

    - STOP Mode
    ===========
            - RTC Clocked by LSE or LSI
            - Regulator in LP mode
            - HSI, HSE OFF and LSI if not used as RTC Clock source
            - No IWDG
            - FLASH in deep power down mode
            - Automatic Wake-up using RTC clocked by LSE/LSI (after ~20s)
            
    - Under Drive STOP Mode
    ===========
            - RTC Clocked by LSI
            - Regulator in LP mode
            - HSI, HSE OFF and LSI if not used as RTC Clock source
            - No IWDG
            - FLASH in deep power down mode
            - Automatic Wakeup using RTC clocked by LSI (after ~20s)

    - STANDBY Mode
    ==============
            - Backup SRAM and RTC OFF
            - IWDG and LSI OFF
            - Wake-up using WakeUp Pin (PA.00)
                        
    - STANDBY Mode with RTC clocked by LSE/LSI 
    ==========================================
            - RTC Clocked by LSE or LSI
            - IWDG OFF and LSI OFF  if not used as RTC Clock source
            - Backup SRAM OFF
            - Automatic Wake-up using RTC clocked by LSE/LSI (after ~20s)

    - STANDBY Mode with RTC clocked by LSE/LSI and BKPSRAM
    ======================================================
            - RTC Clocked by LSE or LSI
            - Backup SRAM ON
            - IWDG OFF
            - Automatic Wake-up using RTC clocked by LSE/LSI (after ~20s)
            
  3. After exit from Low power mode, the LED4 connected to PK.03 is turned On
  4. The sequence will be repeated from step 1
   
   @endverbatim

@note Care must be taken when using HAL_Delay(), this function provides accurate delay (in milliseconds)
      based on variable incremented in SysTick ISR. This implies that if HAL_Delay() is called from
      a peripheral ISR process, then the SysTick interrupt must have higher priority (numerically lower)
      than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
      To change the SysTick interrupt priority you have to use HAL_NVIC_SetPriority() function.
      
@note The application needs to ensure that the SysTick time base is always set to 1 millisecond
      to have correct HAL operation.

@note  Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select the RTC clock source; in this 
       case the Backup domain will be reset in order to modify the RTC Clock source, as consequence RTC  
       registers (including the backup registers) and RCC_BDCR register are set to their reset values.


@note The connection of the LCD reset pin to a dedicated GPIO PH7 instead of the STM32F469 NRST pin may cause residual display on LCD with applications/examples that do not require display.
	  The LCD clear can be ensured by hardware through the boards power off/power on or by software calling the BSP_LCD_Reset() function.

@par Keywords

Power, STOP, Sleep, Standby, Current Consumption, Low Power, LSI, Backup SRAM, Voltage range

@par Directory contents 

  - PWR/PWR_CurrentConsumption/Inc/stm32f4xx_hal_conf.h         HAL configuration file
  - PWR/PWR_CurrentConsumption/Inc/stm32f4xx_it.h               Interrupt handlers header file
  - PWR/PWR_CurrentConsumption/Inc/main.h                       Main program header file
  - PWR/PWR_CurrentConsumption/Inc/stm32f4xx_lp_modes.h         STM32F4xx Low Power Modes header file
  - PWR/PWR_CurrentConsumption/Src/stm32f4xx_it.c               Interrupt handlers
  - PWR/PWR_CurrentConsumption/Src/main.c                       Main program
  - PWR/PWR_CurrentConsumption/Src/stm32f4xx_hal_msp.c          HAL MSP module
  - PWR/PWR_CurrentConsumption/Src/stm32f4xx_lp_modes.c         STM32F4xx Low Power Modes source file

        
@par Hardware and Software environment  

  - This example runs on STM32F469xx devices.
    
  - This example has been tested with STMicroelectronics STM32469I-DISCO 
    boards and can be easily tailored to any other supported device 
    and development board.
      
  - STM32469I-DISCO Set-up
    - Use LED3 and LED4 connected respectively to PD.05 and PK.03 pins.
    - Use User/Wakeup Button connected to PA.00 pin.
    - Connect an amperemeter to jumper JP5 to measure the IDD current


@par How to use it ? 

In order to make the program work, you must do the following:
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example


 */
